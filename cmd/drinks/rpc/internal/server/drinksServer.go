// Code generated by goctl. DO NOT EDIT.
// Source: drinks.proto

package server

import (
	"context"

	"github.com/ptonlix/drinkGPT/cmd/drinks/rpc/drinks"
	"github.com/ptonlix/drinkGPT/cmd/drinks/rpc/internal/logic"
	"github.com/ptonlix/drinkGPT/cmd/drinks/rpc/internal/svc"
)

type DrinksServer struct {
	svcCtx *svc.ServiceContext
	drinks.UnimplementedDrinksServer
}

func NewDrinksServer(svcCtx *svc.ServiceContext) *DrinksServer {
	return &DrinksServer{
		svcCtx: svcCtx,
	}
}

func (s *DrinksServer) GetListCategory(ctx context.Context, in *drinks.ListCategoryReq) (*drinks.ListCategoryResp, error) {
	l := logic.NewGetListCategoryLogic(ctx, s.svcCtx)
	return l.GetListCategory(in)
}

func (s *DrinksServer) AddCategory(ctx context.Context, in *drinks.AddCategoryReq) (*drinks.AddCategoryResp, error) {
	l := logic.NewAddCategoryLogic(ctx, s.svcCtx)
	return l.AddCategory(in)
}

func (s *DrinksServer) UpdateCategory(ctx context.Context, in *drinks.UpdateCategoryReq) (*drinks.UpdateCategoryResp, error) {
	l := logic.NewUpdateCategoryLogic(ctx, s.svcCtx)
	return l.UpdateCategory(in)
}

func (s *DrinksServer) DeleteCategory(ctx context.Context, in *drinks.DeleteCategoryReq) (*drinks.DeleteCategoryResp, error) {
	l := logic.NewDeleteCategoryLogic(ctx, s.svcCtx)
	return l.DeleteCategory(in)
}

func (s *DrinksServer) GetListGoods(ctx context.Context, in *drinks.ListGoodsReq) (*drinks.ListGoodsResp, error) {
	l := logic.NewGetListGoodsLogic(ctx, s.svcCtx)
	return l.GetListGoods(in)
}

func (s *DrinksServer) GetListGoodsByCategory(ctx context.Context, in *drinks.ListGoodsByCategoryReq) (*drinks.ListGoodsByCategoryResp, error) {
	l := logic.NewGetListGoodsByCategoryLogic(ctx, s.svcCtx)
	return l.GetListGoodsByCategory(in)
}

func (s *DrinksServer) AddGoods(ctx context.Context, in *drinks.AddGoodsReq) (*drinks.AddGoodsResp, error) {
	l := logic.NewAddGoodsLogic(ctx, s.svcCtx)
	return l.AddGoods(in)
}

func (s *DrinksServer) UpdateGoods(ctx context.Context, in *drinks.UpdateGoodsReq) (*drinks.UpdateGoodsResp, error) {
	l := logic.NewUpdateGoodsLogic(ctx, s.svcCtx)
	return l.UpdateGoods(in)
}

func (s *DrinksServer) DeleteGoods(ctx context.Context, in *drinks.DeleteGoodsReq) (*drinks.DeleteGoodsResp, error) {
	l := logic.NewDeleteGoodsLogic(ctx, s.svcCtx)
	return l.DeleteGoods(in)
}
