// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: drinks.proto

package drinks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DrinksClient is the client API for Drinks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DrinksClient interface {
	GetListCategory(ctx context.Context, in *ListCategoryReq, opts ...grpc.CallOption) (*ListCategoryResp, error)
	AddCategory(ctx context.Context, in *AddCategoryReq, opts ...grpc.CallOption) (*AddCategoryResp, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryResp, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*DeleteCategoryResp, error)
	GetListGoods(ctx context.Context, in *ListGoodsReq, opts ...grpc.CallOption) (*ListGoodsResp, error)
	GetListGoodsByCategory(ctx context.Context, in *ListGoodsByCategoryReq, opts ...grpc.CallOption) (*ListGoodsByCategoryResp, error)
	AddGoods(ctx context.Context, in *AddGoodsReq, opts ...grpc.CallOption) (*AddGoodsResp, error)
	UpdateGoods(ctx context.Context, in *UpdateGoodsReq, opts ...grpc.CallOption) (*UpdateGoodsResp, error)
	DeleteGoods(ctx context.Context, in *DeleteGoodsReq, opts ...grpc.CallOption) (*DeleteGoodsResp, error)
}

type drinksClient struct {
	cc grpc.ClientConnInterface
}

func NewDrinksClient(cc grpc.ClientConnInterface) DrinksClient {
	return &drinksClient{cc}
}

func (c *drinksClient) GetListCategory(ctx context.Context, in *ListCategoryReq, opts ...grpc.CallOption) (*ListCategoryResp, error) {
	out := new(ListCategoryResp)
	err := c.cc.Invoke(ctx, "/drinks.Drinks/GetListCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinksClient) AddCategory(ctx context.Context, in *AddCategoryReq, opts ...grpc.CallOption) (*AddCategoryResp, error) {
	out := new(AddCategoryResp)
	err := c.cc.Invoke(ctx, "/drinks.Drinks/AddCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinksClient) UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryResp, error) {
	out := new(UpdateCategoryResp)
	err := c.cc.Invoke(ctx, "/drinks.Drinks/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinksClient) DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*DeleteCategoryResp, error) {
	out := new(DeleteCategoryResp)
	err := c.cc.Invoke(ctx, "/drinks.Drinks/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinksClient) GetListGoods(ctx context.Context, in *ListGoodsReq, opts ...grpc.CallOption) (*ListGoodsResp, error) {
	out := new(ListGoodsResp)
	err := c.cc.Invoke(ctx, "/drinks.Drinks/GetListGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinksClient) GetListGoodsByCategory(ctx context.Context, in *ListGoodsByCategoryReq, opts ...grpc.CallOption) (*ListGoodsByCategoryResp, error) {
	out := new(ListGoodsByCategoryResp)
	err := c.cc.Invoke(ctx, "/drinks.Drinks/GetListGoodsByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinksClient) AddGoods(ctx context.Context, in *AddGoodsReq, opts ...grpc.CallOption) (*AddGoodsResp, error) {
	out := new(AddGoodsResp)
	err := c.cc.Invoke(ctx, "/drinks.Drinks/AddGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinksClient) UpdateGoods(ctx context.Context, in *UpdateGoodsReq, opts ...grpc.CallOption) (*UpdateGoodsResp, error) {
	out := new(UpdateGoodsResp)
	err := c.cc.Invoke(ctx, "/drinks.Drinks/UpdateGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinksClient) DeleteGoods(ctx context.Context, in *DeleteGoodsReq, opts ...grpc.CallOption) (*DeleteGoodsResp, error) {
	out := new(DeleteGoodsResp)
	err := c.cc.Invoke(ctx, "/drinks.Drinks/DeleteGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrinksServer is the server API for Drinks service.
// All implementations must embed UnimplementedDrinksServer
// for forward compatibility
type DrinksServer interface {
	GetListCategory(context.Context, *ListCategoryReq) (*ListCategoryResp, error)
	AddCategory(context.Context, *AddCategoryReq) (*AddCategoryResp, error)
	UpdateCategory(context.Context, *UpdateCategoryReq) (*UpdateCategoryResp, error)
	DeleteCategory(context.Context, *DeleteCategoryReq) (*DeleteCategoryResp, error)
	GetListGoods(context.Context, *ListGoodsReq) (*ListGoodsResp, error)
	GetListGoodsByCategory(context.Context, *ListGoodsByCategoryReq) (*ListGoodsByCategoryResp, error)
	AddGoods(context.Context, *AddGoodsReq) (*AddGoodsResp, error)
	UpdateGoods(context.Context, *UpdateGoodsReq) (*UpdateGoodsResp, error)
	DeleteGoods(context.Context, *DeleteGoodsReq) (*DeleteGoodsResp, error)
	mustEmbedUnimplementedDrinksServer()
}

// UnimplementedDrinksServer must be embedded to have forward compatible implementations.
type UnimplementedDrinksServer struct {
}

func (UnimplementedDrinksServer) GetListCategory(context.Context, *ListCategoryReq) (*ListCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCategory not implemented")
}
func (UnimplementedDrinksServer) AddCategory(context.Context, *AddCategoryReq) (*AddCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCategory not implemented")
}
func (UnimplementedDrinksServer) UpdateCategory(context.Context, *UpdateCategoryReq) (*UpdateCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedDrinksServer) DeleteCategory(context.Context, *DeleteCategoryReq) (*DeleteCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedDrinksServer) GetListGoods(context.Context, *ListGoodsReq) (*ListGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListGoods not implemented")
}
func (UnimplementedDrinksServer) GetListGoodsByCategory(context.Context, *ListGoodsByCategoryReq) (*ListGoodsByCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListGoodsByCategory not implemented")
}
func (UnimplementedDrinksServer) AddGoods(context.Context, *AddGoodsReq) (*AddGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGoods not implemented")
}
func (UnimplementedDrinksServer) UpdateGoods(context.Context, *UpdateGoodsReq) (*UpdateGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoods not implemented")
}
func (UnimplementedDrinksServer) DeleteGoods(context.Context, *DeleteGoodsReq) (*DeleteGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoods not implemented")
}
func (UnimplementedDrinksServer) mustEmbedUnimplementedDrinksServer() {}

// UnsafeDrinksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DrinksServer will
// result in compilation errors.
type UnsafeDrinksServer interface {
	mustEmbedUnimplementedDrinksServer()
}

func RegisterDrinksServer(s grpc.ServiceRegistrar, srv DrinksServer) {
	s.RegisterService(&Drinks_ServiceDesc, srv)
}

func _Drinks_GetListCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).GetListCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinks.Drinks/GetListCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).GetListCategory(ctx, req.(*ListCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinks_AddCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).AddCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinks.Drinks/AddCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).AddCategory(ctx, req.(*AddCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinks_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinks.Drinks/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).UpdateCategory(ctx, req.(*UpdateCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinks_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinks.Drinks/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).DeleteCategory(ctx, req.(*DeleteCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinks_GetListGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).GetListGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinks.Drinks/GetListGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).GetListGoods(ctx, req.(*ListGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinks_GetListGoodsByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGoodsByCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).GetListGoodsByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinks.Drinks/GetListGoodsByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).GetListGoodsByCategory(ctx, req.(*ListGoodsByCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinks_AddGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).AddGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinks.Drinks/AddGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).AddGoods(ctx, req.(*AddGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinks_UpdateGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).UpdateGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinks.Drinks/UpdateGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).UpdateGoods(ctx, req.(*UpdateGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinks_DeleteGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).DeleteGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinks.Drinks/DeleteGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).DeleteGoods(ctx, req.(*DeleteGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Drinks_ServiceDesc is the grpc.ServiceDesc for Drinks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drinks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drinks.Drinks",
	HandlerType: (*DrinksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListCategory",
			Handler:    _Drinks_GetListCategory_Handler,
		},
		{
			MethodName: "AddCategory",
			Handler:    _Drinks_AddCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _Drinks_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _Drinks_DeleteCategory_Handler,
		},
		{
			MethodName: "GetListGoods",
			Handler:    _Drinks_GetListGoods_Handler,
		},
		{
			MethodName: "GetListGoodsByCategory",
			Handler:    _Drinks_GetListGoodsByCategory_Handler,
		},
		{
			MethodName: "AddGoods",
			Handler:    _Drinks_AddGoods_Handler,
		},
		{
			MethodName: "UpdateGoods",
			Handler:    _Drinks_UpdateGoods_Handler,
		},
		{
			MethodName: "DeleteGoods",
			Handler:    _Drinks_DeleteGoods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drinks.proto",
}
