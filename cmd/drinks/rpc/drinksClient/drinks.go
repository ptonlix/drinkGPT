// Code generated by goctl. DO NOT EDIT.
// Source: drinks.proto

package drinksClient

import (
	"context"

	"github.com/ptonlix/drinkGPT/cmd/drinks/rpc/drinks"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCategoryReq          = drinks.AddCategoryReq
	AddCategoryResp         = drinks.AddCategoryResp
	AddGoodsReq             = drinks.AddGoodsReq
	AddGoodsResp            = drinks.AddGoodsResp
	Category                = drinks.Category
	DeleteCategoryReq       = drinks.DeleteCategoryReq
	DeleteCategoryResp      = drinks.DeleteCategoryResp
	DeleteGoodsReq          = drinks.DeleteGoodsReq
	DeleteGoodsResp         = drinks.DeleteGoodsResp
	Goods                   = drinks.Goods
	ListCategoryReq         = drinks.ListCategoryReq
	ListCategoryResp        = drinks.ListCategoryResp
	ListGoodsByCategoryReq  = drinks.ListGoodsByCategoryReq
	ListGoodsByCategoryResp = drinks.ListGoodsByCategoryResp
	ListGoodsReq            = drinks.ListGoodsReq
	ListGoodsResp           = drinks.ListGoodsResp
	UpdateCategoryReq       = drinks.UpdateCategoryReq
	UpdateCategoryResp      = drinks.UpdateCategoryResp
	UpdateGoodsReq          = drinks.UpdateGoodsReq
	UpdateGoodsResp         = drinks.UpdateGoodsResp

	Drinks interface {
		GetListCategory(ctx context.Context, in *ListCategoryReq, opts ...grpc.CallOption) (*ListCategoryResp, error)
		AddCategory(ctx context.Context, in *AddCategoryReq, opts ...grpc.CallOption) (*AddCategoryResp, error)
		UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryResp, error)
		DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*DeleteCategoryResp, error)
		GetListGoods(ctx context.Context, in *ListGoodsReq, opts ...grpc.CallOption) (*ListGoodsResp, error)
		GetListGoodsByCategory(ctx context.Context, in *ListGoodsByCategoryReq, opts ...grpc.CallOption) (*ListGoodsByCategoryResp, error)
		AddGoods(ctx context.Context, in *AddGoodsReq, opts ...grpc.CallOption) (*AddGoodsResp, error)
		UpdateGoods(ctx context.Context, in *UpdateGoodsReq, opts ...grpc.CallOption) (*UpdateGoodsResp, error)
		DeleteGoods(ctx context.Context, in *DeleteGoodsReq, opts ...grpc.CallOption) (*DeleteGoodsResp, error)
	}

	defaultDrinks struct {
		cli zrpc.Client
	}
)

func NewDrinks(cli zrpc.Client) Drinks {
	return &defaultDrinks{
		cli: cli,
	}
}

func (m *defaultDrinks) GetListCategory(ctx context.Context, in *ListCategoryReq, opts ...grpc.CallOption) (*ListCategoryResp, error) {
	client := drinks.NewDrinksClient(m.cli.Conn())
	return client.GetListCategory(ctx, in, opts...)
}

func (m *defaultDrinks) AddCategory(ctx context.Context, in *AddCategoryReq, opts ...grpc.CallOption) (*AddCategoryResp, error) {
	client := drinks.NewDrinksClient(m.cli.Conn())
	return client.AddCategory(ctx, in, opts...)
}

func (m *defaultDrinks) UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryResp, error) {
	client := drinks.NewDrinksClient(m.cli.Conn())
	return client.UpdateCategory(ctx, in, opts...)
}

func (m *defaultDrinks) DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*DeleteCategoryResp, error) {
	client := drinks.NewDrinksClient(m.cli.Conn())
	return client.DeleteCategory(ctx, in, opts...)
}

func (m *defaultDrinks) GetListGoods(ctx context.Context, in *ListGoodsReq, opts ...grpc.CallOption) (*ListGoodsResp, error) {
	client := drinks.NewDrinksClient(m.cli.Conn())
	return client.GetListGoods(ctx, in, opts...)
}

func (m *defaultDrinks) GetListGoodsByCategory(ctx context.Context, in *ListGoodsByCategoryReq, opts ...grpc.CallOption) (*ListGoodsByCategoryResp, error) {
	client := drinks.NewDrinksClient(m.cli.Conn())
	return client.GetListGoodsByCategory(ctx, in, opts...)
}

func (m *defaultDrinks) AddGoods(ctx context.Context, in *AddGoodsReq, opts ...grpc.CallOption) (*AddGoodsResp, error) {
	client := drinks.NewDrinksClient(m.cli.Conn())
	return client.AddGoods(ctx, in, opts...)
}

func (m *defaultDrinks) UpdateGoods(ctx context.Context, in *UpdateGoodsReq, opts ...grpc.CallOption) (*UpdateGoodsResp, error) {
	client := drinks.NewDrinksClient(m.cli.Conn())
	return client.UpdateGoods(ctx, in, opts...)
}

func (m *defaultDrinks) DeleteGoods(ctx context.Context, in *DeleteGoodsReq, opts ...grpc.CallOption) (*DeleteGoodsResp, error) {
	client := drinks.NewDrinksClient(m.cli.Conn())
	return client.DeleteGoods(ctx, in, opts...)
}
